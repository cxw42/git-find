#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"App/GitFind.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'APP_GITFIND';
  package App::GitFind;
  
  use 5.010;
  use strict;
  use warnings;
  
  use Getopt::Long 2.34 qw(GetOptionsFromArray :config),
      qw(auto_help auto_version),     # handle -?, --help, --version
      qw(passthrough require_order),  # stop at the first unrecognized.  TODO
      qw(no_getopt_compat gnu_compat bundling);   # --foo, -x, no +x
  
  use Git;
  
  our $VERSION = '0.000001';
  
  # === Documentation === {{{1
  
  =head1 NAME
  
  App::GitFind - Find files anywhere in a Git repository
  
  =head1 SYNOPSIS
  
  Quick summary of what the module does.
  
  Perhaps a little code snippet.
  
      use App::GitFind;
      exit App::GitFind->new(\@ARGV)->run;
  
  See L<git-find> for more usage information.
  
  =head1 SUBROUTINES/METHODS
  
  =cut
  
  # }}}1
  
  =head2 new
  
  The constructor.  Takes an arrayref of arguments, e.g., C<\@ARGV>.  May
  C<exit()>, e.g., on C<--help>.
  
  =cut
  
  sub new {
      my ($package, $lrArgv) = @_;
      my $self = _process_options($lrArgv);
      bless $self, $package;
  } #new()
  
  =head2 run
  
  Does the work.
  
  =cut
  
  sub run {
      my $repo = Git->repository('.');
      use Data::Dumper;
      say "Repo: ", Dumper $repo;
  } #new()
  
  =head1 INTERNALS
  
  =head2 _process_options
  
  Process the options and return a hashref.  Any remaining arguments are
  stored under key C<_>.
  
  =cut
  
  sub _process_options {
      my $lrArgv = shift // [];
      my %opts;
  
      # uncoverable branch true
      GetOptionsFromArray($lrArgv, \%opts, qw(h man v))
          or die 'Error while processing global options';
          # At present, this always succeeds, because it is configured to simply
          # stop at the first unrecognized option, and because none of the
          # options have coderefs or validation.
      $opts{_} = $lrArgv if @$lrArgv;
  
      Getopt::Long::HelpMessage(-exitval => 0, -verbose => 2) if $opts{man};
      Getopt::Long::HelpMessage(-exitval => 0) if $opts{h};
      Getopt::Long::VersionMessage(-exitval => 0) if $opts{v};
  
      #Getopt::Long::HelpMessage(-exitval => 2) unless @$lrArgv;
  
      return \%opts;
  } #_process_options
  
  1; # End of App::GitFind
  __END__
  
  # === Rest of the docs === {{{1
  
  =head1 AUTHOR
  
  Christopher White, C<< <cxw at cpan.org> >>
  
  =head1 LICENSE AND COPYRIGHT
  
  Copyright 2019 Christopher White.
  
  This program is distributed under the MIT (X11) License:
  L<http://www.opensource.org/licenses/mit-license.php>
  
  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation
  files (the "Software"), to deal in the Software without
  restriction, including without limitation the rights to use,
  copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following
  conditions:
  
  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  
  =cut
  
  # }}}1
  # vi: set fdm=marker fdl=0: #
APP_GITFIND

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE

use App::GitFind;
our $VERSION = $App::GitFind::VERSION;  # for Getopt::Long auto_version
exit App::GitFind->new(\@ARGV)->run;
__END__

# === Documentation === {{{1

=head1 NAME

git-find - Find files anywhere in a Git repository

=head1 SYNOPSIS

Quick summary of what the module does.

Perhaps a little code snippet.

    git find something_or_other

=head1 AUTHOR

Christopher White, C<< <cxw at cpan.org> >>

=head1 BUGS

Please report any bugs or feature requests through the GitHub interface at
L<https://github.com/cxw42/git-find/issues>.  I will be notified, and then
you'll automatically be notified of progress on your bug as I make changes.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc App::GitFind

You can also look for information at:

=over 4

=item * GitHub (report bugs here)

L<https://github.com/cxw42/git-find>

=item * MetaCPAN

L<https://metacpan.org/release/App-GitFind>

=back

=head1 LICENSE AND COPYRIGHT

Copyright 2019 Christopher White.

This program is distributed under the MIT (X11) License:
L<http://www.opensource.org/licenses/mit-license.php>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

=cut

# }}}1
# vi: set fdm=marker fdl=0: #
